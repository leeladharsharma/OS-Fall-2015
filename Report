Assignment 2

Questions
1.	Does your program output any garbage? If yes, why?
Yes, the program outputs garbage value. This is because the producer and consumer are not in synchronization. If the consumer reads data too fast it will pass the producer and read garbage value and if the producer reads data fast it will overwrite the data that the consumer has not yet read.

2.	Are all the produced values getting consumed? Check your program for a small count like 20.
No, all the values are not getting consumed. Although we notice that both producer and consumer runs concurrently, the producer takes less amount of processor time in each iteration as compared to the consumer. The time taken by the consumer process to send the data out to the console causes the high execution time of the consumer process. As a result, though the consumer fill the output buffers fast, it has to wait for the output device to send the characters to the console in order to consider itself 'complete'. Now, since it takes lesser time for the producer to complete one cycle, the producers completes it run cycle during the period in which the consumer waits to send its previously collected characters to the output console. Once the consumer is ready to consume once again, the producer process has already completed its cycle. As a result, the consumer consumes the last modified value that the producer has produced. This happens because both the processes under discussion i.e. producer and consumer are not in synchronized

Functions used:
1.	producer() – This function is responsible  for incrementing the value of shared global integer variable and sending it to the buffer from which it will be consumed by the consumer.
2.	consumer() – This function is responsible for consuming the value provided by the producer in the buffer continuously and printing it repeatedly.
3.	resume() – This function is responsible to unsuspend a process and bring it into ready state. It takes the pid of the process to be unsuspended as a parameter.
4.	create() – This function is responsible for creating a process to begin execution of a procedure. It takes procedure address, stack size, process priority, name and number of arguments as parameters.



Tasks performed-
producer() – Leeladhar
consumer() – Aritra
xsh_prodcons – Leeladhar and Aritra

